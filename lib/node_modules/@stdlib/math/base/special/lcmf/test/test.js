/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var isnanf = require( '@stdlib/math/base/assert/is-nanf' );
var PINF = require( '@stdlib/constants/float64/pinf' );
var NINF = require( '@stdlib/constants/float64/ninf' );
var lcmf = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof lcmf, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns `NaN` if either argument is `NaN`', function test( t ) {
	var v;

	v = lcmf( NaN, 10.0 );
	t.strictEqual( isnanf( v ), true, 'returns NaN' );

	v = lcmf( 10.0, NaN );
	t.strictEqual( isnanf( v ), true, 'returns NaN' );

	v = lcmf( NaN, NaN );
	t.strictEqual( isnanf( v ), true, 'returns NaN' );

	t.end();
});

tape( 'the function returns `NaN` if either argument is `+infinity`', function test( t ) {
	var v;

	v = lcmf( PINF, 10.0 );
	t.strictEqual( isnanf( v ), true, 'returns NaN' );

	v = lcmf( 10.0, PINF );
	t.strictEqual( isnanf( v ), true, 'returns NaN' );

	v = lcmf( PINF, PINF );
	t.strictEqual( isnanf( v ), true, 'returns NaN' );

	t.end();
});

tape( 'the function returns `NaN` if either argument is `-infinity`', function test( t ) {
	var v;

	v = lcmf( NINF, 10.0 );
	t.strictEqual( isnanf( v ), true, 'returns NaN' );

	v = lcmf( 10.0, NINF );
	t.strictEqual( isnanf( v ), true, 'returns NaN' );

	v = lcmf( NINF, NINF );
	t.strictEqual( isnanf( v ), true, 'returns NaN' );

	t.end();
});

tape( 'the function returns `NaN` if either argument is not a floating-point integer', function test( t ) {
	var v;

	v = lcmf( 3.14, 10.0 );
	t.strictEqual( isnanf( v ), true, 'returns NaN' );

	v = lcmf( 10.0, 3.14 );
	t.strictEqual( isnanf( v ), true, 'returns NaN' );

	v = lcmf( 3.14, 6.18 );
	t.strictEqual( isnanf( v ), true, 'returns NaN' );

	t.end();
});

tape( 'the function returns `0` if either argument is `0`', function test( t ) {
	var v;

	v = lcmf( 0.0, 0.0 );
	t.strictEqual( v, 0.0, 'returns 0' );

	v = lcmf( 2.0, 0.0 );
	t.strictEqual( v, 0.0, 'returns 0' );

	v = lcmf( 0.0, -3.0 );
	t.strictEqual( v, 0.0, 'returns 0' );

	t.end();
});

tape( 'the function computes the least common multiple', function test( t ) {
	var v;

	v = lcmf( 6.0, 4.0 );
	t.strictEqual( v, 12.0, 'returns 12' );

	v = lcmf( 6.0, -4.0 );
	t.strictEqual( v, 12.0, 'returns 12' );

	v = lcmf( -6.0, -4.0 );
	t.strictEqual( v, 12.0, 'returns 12' );

	v = lcmf( 2.0, 8.0 );
	t.strictEqual( v, 8.0, 'returns 8' );

	v = lcmf( 15.0, 20.0 );
	t.strictEqual( v, 60.0, 'returns 60' );

	v = lcmf( 20.0, 15.0 );
	t.strictEqual( v, 60.0, 'returns 60' );

	v = lcmf( 35.0, -21.0 );
	t.strictEqual( v, 105.0, 'returns 105' );

	v = lcmf( 48.0, 18.0 );
	t.strictEqual( v, 144.0, 'returns 144' );

	t.end();
});
