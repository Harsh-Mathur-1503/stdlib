/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var format = require( '@stdlib/string/format' );


// MAIN //

/**
* Returns an accumulator function which incrementally computes a weighted standard deviation.
*
* @param {number} [mean] - known mean value
* @throws {TypeError} must provide a number primitive for mean
* @returns {Function} accumulator function
*
* @example
* var accumulator = incrwstdev();
*
* var s = accumulator();
* // returns null
*
* s = accumulator( 2.0, 1.5 );
* // returns 0.0
*
* s = accumulator( -5.0, 2.0 );
* // returns updated weighted standard deviation
*
* s = accumulator();
* // returns current weighted standard deviation
*
* @example
* var accumulator = incrwstdev( 3.14 );
*/
function incrwstdev( mean ) {
    var delta;
    var mu;
    var M2;
    var W;
    var N;

    M2 = 0.0;
    W = 0.0;
    N = 0;
    if ( arguments.length ) {
        if ( !isNumber( mean ) ) {
            throw new TypeError( format( 'invalid argument. Must provide a number. Value: `%s`.', mean ) );
        }
        mu = mean;
        return accumulatorWithMean;
    }
    mu = 0.0;
    return accumulatorWithoutMean;

    /**
    * If provided a value and weight, the accumulator function returns an updated weighted standard deviation. 
    * If not provided a value, the accumulator function returns the current weighted standard deviation.
    *
    * @private
    * @param {number} [x] - new value
    * @param {number} [w] - weight for the new value
    * @returns {(number|null)} weighted standard deviation or null
    */
    function accumulatorWithoutMean( x, w ) {
        if ( arguments.length < 2 ) {
            if ( W === 0 ) {
                return null;
            }
            return Math.sqrt( M2 / W );
        }
        if ( !isNumber( x ) || !isNumber( w ) || w < 0 ) {
            throw new TypeError( 'Both value and non-negative weight are required' );
        }
        W += w;
        N += 1;
        delta = x - mu;
        mu += ( w * delta ) / W;
        M2 += w * delta * ( x - mu );
        return Math.sqrt( M2 / W );
    }

    /**
    * If provided a value and weight, the accumulator function returns an updated weighted standard deviation. 
    * If not provided a value, the accumulator function returns the current weighted standard deviation.
    *
    * @private
    * @param {number} [x] - new value
    * @param {number} [w] - weight for the new value
    * @returns {(number|null)} weighted standard deviation or null
    */
    function accumulatorWithMean( x, w ) {
        if ( arguments.length < 2 ) {
            if ( W === 0 ) {
                return null;
            }
            return Math.sqrt( M2 / W );
        }
        if ( !isNumber( x ) || !isNumber( w ) || w < 0 ) {
            throw new TypeError( 'Both value and non-negative weight are required' );
        }
        W += w;
        delta = x - mu;
        M2 += w * delta * delta;
        return Math.sqrt( M2 / W );
    }
}


// EXPORTS //

module.exports = incrwstdev;
